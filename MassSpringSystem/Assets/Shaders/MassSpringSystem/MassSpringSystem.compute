#pragma kernel CSMainPos
#pragma kernel CSMainVel

#define thread_group_size_x 10
#define thread_group_size_y 10
// need the following for 3D, but value above 1 might not be allowed before shader model / target 5.0: --strank
#define thread_group_size_z 10

//================================================================================================
// Summary
//================================================================================================
/**
 * This shader implements a mass spring model. There are two main kernels: CSMainPos and CSMainVel,
 * for position and velocity respectively. The position kernel is straightforward: it gets the index
 * of the current vertex in the overall grid and updates its position according to it velocity.
 *
 * The velocity kernel uses all of the neighbouring points in the grid as well as the external forces
 * acting on the grid in order to calculate the current acceleration at a given vertex and updates
 * the velocity of that vertex according to the acceleration.
 */

/** The position, velocity and force structs hold 3D positions, velocity and force vectors for individual points on the grid. 
 */
struct Position
{
    float3 pos;
};

struct Velocity
{
    float3 vel;
};

struct Force
{
    float3 force;
};

/** The Neighbours struct holds the positions of the 12 surrounding neighbours of an individual point on the grid. 
 *  These are: north, north-east, east, south-east, south, south-west, west, north-west, north-bend, east-bend, south-bend, west-bend.
 *  The bend neighbours implement resistance to bending in the grid. They are 2 grid spaces away on the x (west bend and east bend)
 *  and y (north bend and south bend) axes.
 */
struct Neighbours
{
    //float2 neighbours[32]; // TODO: this would be enough for 3D neighbours and 2 more bend --strank
    // this means: one up- and one down- variant for each north, north-east, ... neighbour, plus
    // one up-center and one down-center neighbour right above and below,
    // and finally the up-bend and down-bend neighbours two above and two below the center.
    // --strank
float2 neighbours [32];
};

/** The properties struct holds the physical properties of the grid
  *
  * The mass of individual mass points in the mass spring model.
  * Increasing this will make the mass points more resistive to
  * the springs in the model, but will also reduce their velocity.  
  *
  * The level of damping in the system. Increasing this value
  *  will cause the system to return to a more 'stable' state quicker,
  *  and will reduce the propagation of forces throughout the grid.  
  *  
  * The stiffness of the spings in the grid. Increasing this will
  *  cause mass points to 'rebound' with higher velocity, and will
  *  also decrease the time taken for the system to return to a
  *  'stable' state.
  *
  * The lenght of the springs in the grid. This defines how far
  *  each mass unit is at a resting state.
  */
struct Properties
{
    float mass;
    float damping;
    float springStiffness;
    float springLength;
};

struct DeltaTime
{
    float deltaTime;
};

RWStructuredBuffer<Position>   posBuffer;
RWStructuredBuffer<Velocity>   velBuffer;
RWStructuredBuffer<Force>      externalForcesBuffer;
RWStructuredBuffer<Neighbours> neighboursBuffer;
RWStructuredBuffer<Properties> propertiesBuffer;
RWStructuredBuffer<DeltaTime>  deltaTimeBuffer;

/** Get the force exerted on a grid point at index idx by its neighbour at index nIdx.
  */
const float3 getForceForNeighbour (const int idx, const int2 nIdx, const float stiffness, const float springLength, const float dampingFactor)
{
    // the nIdx.x is the index of the neighbour in the posBuffer. nIdx.y is simply a flag (1 or 0), see below.
    // so for non-existant neighbours, the calculation will use index 0, and then throw away the result at the end.
    float3 d      = posBuffer[nIdx.x * nIdx.y].pos - posBuffer[idx].pos;
    float dLength = length(d);
    // avoid division by 0.
    float divisor = dLength + ((float) (dLength == 0.0f));
    float3 dN     = d / (divisor == 0.0f ? 1.0f : divisor);//==0.0f
    float3 force  = stiffness * (d - springLength * dN) + dampingFactor * (velBuffer[nIdx.x].vel - velBuffer[idx.x].vel);
    // nIdx.y is a flag indicating whether that index exists within the grid bounds (1.0f or 0.0f).
    return force *  nIdx.y;
}

//[numthreads (thread_group_size_x, thread_group_size_y, 1)]
// need to switch to this with 3D: --strank
[numthreads (thread_group_size_x, thread_group_size_y, thread_group_size_z)]

void CSMainVel (uint3 id : SV_DispatchThreadID)
{
    /** Our compute shader runs the same kernels in parallel on mutliple blocks of our
     *  mass spring grid. These blocks are of dimensions gX by gY (by gZ --strank),
     *  and there are thread_group_size_x blocks along the x dimension of our grid and
     *  thread_group_size_y along the Y dimension.
     *  
     *  These values MUST be identical to the gridUnitSideX and gridUnitSideY values in the 
     *  MassSpringSystem script.
     */

	//number of points per side, per thread.
    const int gX = 2;
    const int gY = 2;
    const int gZ = 2;
    //grid side resolution
    const int sX = gX * thread_group_size_x;
    const int sY = gY * thread_group_size_y;
    const int sZ = gZ * thread_group_size_z;

    const float  mass          = propertiesBuffer[0].mass;
    const float  damping       = propertiesBuffer[0].damping;
    const float  stiffness     = propertiesBuffer[0].springStiffness;
    const float  springLength  = propertiesBuffer[0].springLength;

    //get the index of the vertex in the overall grid.
    // for 3D, the index is based on the z position as well:
    const int idx = id.x + id.y * sX + id.z * sX * sY;

    //max index is the number of vertices in our grid.
    //const int maxIdx = sX * sY;
    const int maxIdx = sX * sY * sZ;

    // TODO: needs to include the additional neighbours, see above at struct Neighbours definition! -- strank
    int2 northNeighbour     = neighboursBuffer[idx].neighbours [0];
    int2 northEastNeighbour = neighboursBuffer[idx].neighbours [1];
    int2 eastNeighbour      = neighboursBuffer[idx].neighbours [2];
    int2 southEastNeighbour = neighboursBuffer[idx].neighbours [3];
    int2 southNeighbour     = neighboursBuffer[idx].neighbours [4];
    int2 southWestNeighbour = neighboursBuffer[idx].neighbours [5];
    int2 westNeighbour      = neighboursBuffer[idx].neighbours [6];
    int2 northWestNeighbour = neighboursBuffer[idx].neighbours [7];

    int2 up_immediateNeighbour = neighboursBuffer[idx].neighbours[8];
    int2 up_northNeighbour     = neighboursBuffer[idx].neighbours[9];
    int2 up_northEastNeighbour = neighboursBuffer[idx].neighbours[10];
    int2 up_eastNeighbour = neighboursBuffer[idx].neighbours[11];
    int2 up_southEastNeighbour = neighboursBuffer[idx].neighbours[12];
    int2 up_southNeighbour = neighboursBuffer[idx].neighbours[13];
    int2 up_southWestNeighbour = neighboursBuffer[idx].neighbours[14];
    int2 up_westNeighbour = neighboursBuffer[idx].neighbours[15];
    int2 up_northWestNeighbour = neighboursBuffer[idx].neighbours[16];

    int2 down_immediateNeighbour = neighboursBuffer[idx].neighbours[17];
    int2 down_northNeighbour = neighboursBuffer[idx].neighbours[18];
    int2 down_northEastNeighbour = neighboursBuffer[idx].neighbours[19];
    int2 down_eastNeighbour = neighboursBuffer[idx].neighbours[20];
    int2 down_southEastNeighbour = neighboursBuffer[idx].neighbours[21];
    int2 down_southNeighbour = neighboursBuffer[idx].neighbours[22];
    int2 down_southWestNeighbour = neighboursBuffer[idx].neighbours[23];
    int2 down_westNeighbour = neighboursBuffer[idx].neighbours[24];
    int2 down_northWestNeighbour = neighboursBuffer[idx].neighbours[25];

    int2 northBendNeighbour = neighboursBuffer[idx].neighbours [26];
    int2 eastBendNeighbour = neighboursBuffer[idx].neighbours[27];
    int2 southBendNeighbour = neighboursBuffer[idx].neighbours[28];
    int2 westBendNeighbour = neighboursBuffer[idx].neighbours[29];
    int2 upBendNeighbour = neighboursBuffer[idx].neighbours[30];
    int2 downBendNeighbour = neighboursBuffer[idx].neighbours[31];

    /** Our grid is structured to have rigid, non-moving edges. 
     */
    //const float notEdge = (float) (northBendNeighbour.y && eastBendNeighbour.y && westBendNeighbour.y && southBendNeighbour.y);
    //const float notEdge = (float)(northNeighbour.y && eastNeighbour.y && westNeighbour.y && southNeighbour.y);
    //const float notEdge = (float)(northNeighbour.y && eastNeighbour.y && westNeighbour.y && southNeighbour.y && up_immediateNeighbour.y && down_immediateNeighbour.y);
    const float notEdge = 1.0f;

    const float3 northForce      = getForceForNeighbour (idx, northNeighbour,     stiffness, springLength, damping);
    const float3 northEastForce  = getForceForNeighbour (idx, northEastNeighbour, stiffness, sqrt(2.0f)/*1.414 */* springLength, damping); //TODO: find available functions in compute shaders to actually use the real root of 2, etc, or a better approximation
    const float3 eastForce       = getForceForNeighbour (idx, eastNeighbour,      stiffness, springLength, damping);
    const float3 southEastForce  = getForceForNeighbour (idx, southEastNeighbour, stiffness, sqrt(2.0f)/*1.414 */* springLength, damping);
    const float3 southForce      = getForceForNeighbour (idx, southNeighbour,     stiffness, springLength, damping);
    const float3 southWestForce  = getForceForNeighbour (idx, southWestNeighbour, stiffness, sqrt(2.0f)/*1.414 */* springLength, damping);
    const float3 westForce       = getForceForNeighbour (idx, westNeighbour,      stiffness, springLength, damping);
    const float3 northWestForce  = getForceForNeighbour (idx, northWestNeighbour, stiffness, sqrt(2.0f)/*1.414 */*springLength, damping);

    const float3 up_immediateForce = getForceForNeighbour(idx, up_immediateNeighbour, stiffness, springLength, damping);
    const float3 up_northForce     = getForceForNeighbour(idx, up_northNeighbour, stiffness, sqrt(2.0f)/*1.414 */* springLength, damping);
    const float3 up_northEastForce = getForceForNeighbour(idx, up_northEastNeighbour, stiffness, sqrt(3.0f)/*1.732 */* springLength, damping);
    const float3 up_eastForce      = getForceForNeighbour(idx, up_eastNeighbour, stiffness, sqrt(2.0f)/*1.414 */* springLength, damping);
    const float3 up_southEastForce = getForceForNeighbour(idx, up_southEastNeighbour, stiffness, sqrt(3.0f)/*1.732 */* springLength, damping);
    const float3 up_southForce = getForceForNeighbour(idx, up_southNeighbour, stiffness, sqrt(2.0f)/*1.414 */*springLength, damping);
    const float3 up_southWestForce = getForceForNeighbour(idx, up_southWestNeighbour, stiffness, sqrt(3.0f)/*1.732 */*springLength, damping);
    const float3 up_westForce = getForceForNeighbour(idx, up_westNeighbour, stiffness, sqrt(2.0f)/*1.414 */*springLength, damping);
    const float3 up_northWestForce = getForceForNeighbour(idx, up_northWestNeighbour, stiffness, sqrt(3.0f)/*1.732 */*springLength, damping);

    const float3 down_immediateForce = getForceForNeighbour(idx, down_immediateNeighbour, stiffness, springLength, damping);
    const float3 down_northForce = getForceForNeighbour(idx, down_northNeighbour, stiffness, sqrt(2.0f)/*1.414 */*springLength, damping);
    const float3 down_northEastForce = getForceForNeighbour(idx, down_northEastNeighbour, stiffness, sqrt(3.0f)/*1.732 */*springLength, damping);
    const float3 down_eastForce = getForceForNeighbour(idx, down_eastNeighbour, stiffness, sqrt(2.0f)/*1.414 */*springLength, damping);
    const float3 down_southEastForce = getForceForNeighbour(idx, down_southEastNeighbour, stiffness, sqrt(3.0f)/*1.732 */*springLength, damping);
    const float3 down_southForce = getForceForNeighbour(idx, down_southNeighbour, stiffness, sqrt(2.0f)/*1.414 */*springLength, damping);
    const float3 down_southWestForce = getForceForNeighbour(idx, down_southWestNeighbour, stiffness, sqrt(3.0f)/*1.732 */*springLength, damping);
    const float3 down_westForce = getForceForNeighbour(idx, down_westNeighbour, stiffness, sqrt(2.0f)/*1.414 */*springLength, damping);
    const float3 down_northWestForce = getForceForNeighbour(idx, down_northWestNeighbour, stiffness, sqrt(3.0f)/*1.732 */*springLength, damping);

    const float3 northBendForce  = getForceForNeighbour(idx, northBendNeighbour, stiffness, 2.0f * springLength, damping);
    const float3 eastBendForce   = getForceForNeighbour(idx, eastBendNeighbour, stiffness, 2.0f * springLength, damping);
    const float3 westBendForce   = getForceForNeighbour(idx, southBendNeighbour, stiffness, 2.0f * springLength, damping);
    const float3 southBendForce  = getForceForNeighbour(idx, westBendNeighbour, stiffness, 2.0f * springLength, damping);
    const float3 upBendForce = getForceForNeighbour(idx, upBendNeighbour, stiffness, 2.0f * springLength, damping);
    const float3 downBendForce = getForceForNeighbour(idx, downBendNeighbour, stiffness, 2.0f * springLength, damping);

    const float3 internalForce   = (northForce + eastForce + westForce + southForce +
        northEastForce + northWestForce + southEastForce + southWestForce +
        up_immediateForce + up_northForce + up_eastForce + up_westForce + up_southForce +
        up_northEastForce + up_northWestForce + up_southEastForce + up_southWestForce +
        down_immediateForce + down_northForce + down_eastForce + down_westForce + down_southForce +
        down_northEastForce + down_northWestForce + down_southEastForce + down_southWestForce +
        northBendForce + eastBendForce + westBendForce + southBendForce +
        upBendForce + downBendForce);//simplify and see which combinations of neighbors' forces cause the grid to go crazy or not
    //Add the external forces from the external forces buffer to the internal neighbour forces.
    const float3 force           = internalForce + externalForcesBuffer[idx].force;
    //m = fa, a = f/m
    const float3 acceleration    = force / (mass == 0.0f ? 1.0f : mass);
    float        delta           = deltaTimeBuffer[0].deltaTime;
    //notEdge acts like a boolean flag here, zeroing out any vertices that exist along the edges. Remove notedge to allow for non-rigid edges
    const float3 vDelta = notEdge * acceleration * delta;
    float3 newVel = velBuffer[idx].vel + vDelta;
    velBuffer[idx].vel = newVel;
}

//[numthreads (thread_group_size_x, thread_group_size_y, 1)]
// need to switch to this with 3D: --strank
[numthreads (thread_group_size_x, thread_group_size_y, thread_group_size_z)]
void CSMainPos (uint3 id : SV_DispatchThreadID)
{
    //number of points per side, per thread.
    const int gX   = 2;
    const int gY   = 2;
    const int gZ   = 2;
    //grid side resolution
    const int sX = gX * thread_group_size_x;
    const int sY = gY * thread_group_size_y;

    //const int sZ = gZ * thread_group_size_z; //not needed here --strank

    //index y, x, in order to convert to unity space
    //const int idx = id.x + id.y * sX ;
    // for 3D, the index is based on the z position as well: --strank
    const int idx = id.x + id.y * sX + id.z * sX * sY;

    //calculate new positions given new velocities
    const float delta  = deltaTimeBuffer[0].deltaTime;
    externalForcesBuffer[idx].force = float3 (0.0f, 0.0f, 0.0f);
    posBuffer[idx].pos = posBuffer[idx].pos + (velBuffer[idx].vel * delta);
}
