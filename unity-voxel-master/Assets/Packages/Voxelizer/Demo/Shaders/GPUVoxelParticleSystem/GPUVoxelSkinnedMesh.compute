
#pragma kernel Setup
#pragma kernel Update

#define THREAD [numthreads(8, 1, 1)]
#define DISCARD_OVERFLOW if (id.x >= _ParticleCount) return;

#include "../../../Shaders/Voxel.cginc"
#include "Random.cginc"
#include "Quaternion.cginc"
#include "Noise/SimplexNoiseGrad3D.cginc"
#include "VParticle.cginc"

float _UnitLength;

StructuredBuffer<Voxel> _VoxelBuffer;

RWStructuredBuffer<VParticle> _ParticleBuffer;
uint _ParticleCount;

THREAD
void Setup (uint3 id : SV_DispatchThreadID)
{
    DISCARD_OVERFLOW

    int vindex = id.x;
    Voxel v = _VoxelBuffer[vindex];

    VParticle particle;
    particle.position = v.position;
    particle.size = float3(1, 1, 1) * (lerp(0, _UnitLength, (uint)v.flag));
    particle.rotation = QUATERNION_IDENTITY;
    particle.velocity = float3(0, 0, 0);
    particle.speed = 0;
    _ParticleBuffer[id.x] = particle;
}

THREAD
void Update (uint3 id : SV_DispatchThreadID)
{
    DISCARD_OVERFLOW

    Voxel v = _VoxelBuffer[id.x];

    VParticle particle;
    particle = _ParticleBuffer[id.x];
    float f01 = step(0.5, (uint)v.flag);
    float3 size = f01 * float3(_UnitLength, _UnitLength, _UnitLength);
    particle.position = v.position;
    particle.size = size;
    _ParticleBuffer[id.x] = particle;
}
